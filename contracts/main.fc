#include "imports/stdlib.fc";

;; storage#_ addr1:MsgAddress addr2:MsgAddress = Storage;

const const::min_tons_for_storage = 10000000; ;; 0.01 TON

(int, int, slice, slice) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_uint(32),                         ;; counter_value
    ds~load_uint(32),                         ;; some_value
    ds~load_msg_addr(),                       ;; the most recent sender
    ds~load_msg_addr()                        ;; owner_address
  );
}

() save_data(int counter_value, int some_value, slice recent_sender, slice owner_address) impure inline {
  set_data(begin_cell()
    .store_uint(counter_value, 32)            ;; counter_value
    .store_uint(some_value, 32)               ;; some_vlaue
    .store_slice(recent_sender)               ;; the most recent sender
    .store_slice(owner_address)               ;; owner_address
    .end_cell());
}

() authorize (sender, author) impure inline {
  throw_unless(103, equal_slice_bits(sender, author));
}

() execute (cell) impure asm "c5 POPCTR";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();

  int op = in_msg_body~load_uint(32);

  var (counter_value, some_value, recent_sender, owner_address) = load_data();

  if (op == 1) {
    ;; counter

    save_data(counter_value + 1, some_value, sender_address, owner_address);
    return();
  }

  if (op == 2) {
    ;; deposit

    return();
  }

  if (op == 3) {
    ;; withdrawal
    authorize(sender_address, owner_address);

    int withdraw_amount = in_msg_body~load_coins();
    var [balance, _] = get_balance();
    throw_unless(104, balance >= withdraw_amount);

    int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);
    int msg_mode = 1;     ;; 0 (Ordinary message) + 1 (Pay transfer fees separately from the message value)

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_address)
        .store_coins(return_value)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

    send_raw_message(msg.end_cell(), msg_mode);

    return();
  }

  if (op == 4) {
    ;; increment

    int increment_by = in_msg_body~load_uint(32);

    save_data(counter_value + 1, some_value + increment_by, sender_address, owner_address);
    return();
  }

  if (op == 5) {
    ;; execute
    authorize(sender_address, owner_address);

    cell request = in_msg_body~load_ref();
		execute(request);

    save_data(counter_value + 1, some_value, sender_address, owner_address);
    return();
  }

  if(op == 4){
		var burn_msg = begin_cell()
			.store_uint(0x18, 6)
			.store_slice(sender_address)
			.store_coins(0)
			.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

		send_raw_message(burn_msg.end_cell(),128 + 32);
	}

  throw(666);
}

(int, int, slice, slice) get_contract_storage_data() method_id {
  return load_data();
}

int balance() method_id {
  var [balance, _] = get_balance();
  return balance;
}
