#include "imports/stdlib.fc";

const const::min_tons_for_storage = 10000000; ;; 0.01 TON

(int, slice, slice) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_uint(32), ;; counter_value
    ds~load_msg_addr(), ;; the most recent sender
    ds~load_msg_addr() ;; owner_address
  );
}

() recv_internal({- int my_balance, -} int msg_value, cell in_msg_full, slice in_msg_body) impure {
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  slice sender_address = cs~load_msg_addr();

  int op = in_msg_body~load_uint(32);

  if (op == 1) {
    ;; counter logic is coming here

    slice ds = get_data().begin_parse();
    int counter_value = ds~load_uint(32);

    set_data(
      begin_cell().store_uint(counter_value + 1, 32).store_slice(sender_address).end_cell()
    );
  }

  return ();
}

(int, slice) get_contract_storage_data() method_id {
  slice ds = get_data().begin_parse();
  return (
    ds~load_uint(32),  ;; counter_value
    ds~load_msg_addr() ;; the most recent sender
  );
}

slice get_the_latest_sender() method_id {
  slice ds = get_data().begin_parse();
  return ds~load_msg_addr();
}
